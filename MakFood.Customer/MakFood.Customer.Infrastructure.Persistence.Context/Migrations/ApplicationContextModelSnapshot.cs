// <auto-generated />
using System;
using MakFood.Customer.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakFood.Customer.Infrastructure.Persistence.Context.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecieverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecieverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<Guid?>("FriendshipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FriendshipId");

                    b.ToTable("FriendshipState");

                    b.HasDiscriminator().HasValue("FriendshipState");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MakFood.Customer.Domain.UserAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Plaque")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitNo")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.UserAggregate.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.AcceptedFriendshipState", b =>
                {
                    b.HasBaseType("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState");

                    b.HasDiscriminator().HasValue("AcceptedFriendshipState");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.RejectedFriendshipState", b =>
                {
                    b.HasBaseType("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState");

                    b.HasDiscriminator().HasValue("RejectedFriendshipState");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.RequestedFriendshipState", b =>
                {
                    b.HasBaseType("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState");

                    b.HasDiscriminator().HasValue("RequestedFriendshipState");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.RevokedFriendshipState", b =>
                {
                    b.HasBaseType("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState");

                    b.HasDiscriminator().HasValue("RevokedFriendshipState");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.States.FriendshipState", b =>
                {
                    b.HasOne("MakFood.Customer.Domain.FriendshipAggregate.Friendship", null)
                        .WithMany("StateHistory")
                        .HasForeignKey("FriendshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MakFood.Customer.Domain.UserAggregate.Address", b =>
                {
                    b.HasOne("MakFood.Customer.Domain.UserAggregate.UserAccount", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MakFood.Customer.Domain.UserAggregate.UserAccount", b =>
                {
                    b.OwnsOne("MakFood.Customer.Domain.UserAggregate.AccountInformation", "AccountInformation", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Badge")
                                .HasColumnType("int");

                            b1.Property<DateTime>("JoinDateTime")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ProfileThumbnail")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("MakFood.Customer.Domain.UserAggregate.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Mail")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("MakFood.Customer.Domain.UserAggregate.IdentityInformation", "IdentityInformation", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly?>("BirthDate")
                                .HasColumnType("date");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("AccountInformation")
                        .IsRequired();

                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("IdentityInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("MakFood.Customer.Domain.FriendshipAggregate.Friendship", b =>
                {
                    b.Navigation("StateHistory");
                });

            modelBuilder.Entity("MakFood.Customer.Domain.UserAggregate.UserAccount", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
